{"version":3,"sources":["meteor://ğŸ’»app/imports/api/auth.js","meteor://ğŸ’»app/imports/api/schema.js","meteor://ğŸ’»app/imports/api/tasks.js","meteor://ğŸ’»app/imports/startup/validate.js","meteor://ğŸ’»app/server/main.js"],"names":["Meteor","Accounts","check","methods","email","pwd","console","log","createUser","password","Random","Tasks","typeDefs","resolvers","Query","user","root","args","context","userId","id","User","emails","randomString","tasks","find","owner","$eq","_id","fetch","Mongo","Collection","isServer","publish","publishTasks","text","Error","String","insert","createdAt","Date","username","users","findOne","taskId","remove","setChecked","Boolean","update","$set","checked","newText","validateLoginAttempt","validate","option","allowed","createApolloServer","makeExecutableSchema","addMockFunctionsToSchema","schema","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Accounts } from 'meteor/accounts-base';\r\nimport { check } from 'meteor/check';\r\n\r\n\r\n// Add methods to be called from Meteor.\r\n\r\nMeteor.methods({\r\n\r\n    /**\r\n     *  Adds a user account with their email and password in the db.\r\n     *  @param email - The user's email address\r\n     *  @param pwd - The user's desired password\r\n     */\r\n  'signUp'(email,pwd){\r\n      console.log(\"signing up\");\r\n      Accounts.createUser({\r\n        email:email,\r\n        password:pwd,\r\n      });\r\n\r\n  },\r\n\r\n});\r\n","/**\r\n * Created by Phil on 11/16/2016.\r\n */\r\nimport { Random } from 'meteor/random';\r\nimport { Tasks } from './tasks';\r\n\r\nexport const typeDefs = [`\r\ntype Email {\r\n  address: String\r\n  verified: Boolean\r\n}\r\n\r\n\r\n\r\ntype User {\r\n  emails: [Email]\r\n  username: String\r\n  randomString: String\r\n  tasks: [Task]\r\n  _id: String\r\n}\r\n\r\ntype Task {\r\n    text: String\r\n    createdAt: String\r\n    owner: String\r\n    username: String\r\n}\r\ntype Query {\r\n  user(id: String!): User\r\n}\r\nschema {\r\n  query: Query\r\n}\r\n`];\r\n\r\nexport const resolvers = {\r\n    Query: {\r\n        user(root, args, context) {\r\n            // Only return the current user, for security\r\n            if (context.userId === args.id) {\r\n                return context.user;\r\n            }\r\n        },\r\n    },\r\n    User: {\r\n        emails: ({emails}) => emails,\r\n        randomString: () => Random.id(),\r\n        tasks(user){\r\n            return Tasks.find({owner:{$eq:user._id}}).fetch();\r\n        }\r\n    },\r\n    \r\n};\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\n// This code block only gets run if this file is imported/ran on the server.\r\nif(Meteor.isServer){\r\n  Meteor.publish('tasks', function publishTasks(){\r\n    return Tasks.find();\r\n  });\r\n}\r\n\r\n\r\n// Start meteor methods - like controllers\r\nMeteor.methods({\r\n    /**\r\n     * Insert a task document into the Task collection\r\n     * @param text - The text of the new task\r\n     */\r\n      'tasks.insert'(text){\r\n\r\n        // Throw an error if the user is not logged in\r\n        if(! this.userId){\r\n          throw new Meteor.Error(\"not-authorized\");\r\n        }\r\n        // Validate that text is a string\r\n        check(text, String);\r\n        // Insert a new task\r\n        Tasks.insert({\r\n          text,\r\n          createdAt: new Date(),\r\n          owner: this.userId,\r\n          username: Meteor.users.findOne(this.userId).username,\r\n        });\r\n      },\r\n\r\n    /**\r\n     * Remove a task document from the Tasks collection\r\n     * @param taskId - the ID of the Task to remove\r\n     */\r\n      'tasks.remove' (taskId) {\r\n        check(taskId,String);\r\n        Tasks.remove(taskId);\r\n\r\n      },\r\n\r\n    /**\r\n     * Set the checked attribute of a task\r\n     * @param taskId - the ID of the Task\r\n     * @param setChecked - a boolean that represents completion\r\n     */\r\n    'tasks.setChecked' ( taskId, setChecked ){\r\n        check(taskId, String);\r\n        check(setChecked,Boolean);\r\n\r\n        // use the $set keyword(MongoDB keyword) because it allows the document\r\n        // to be updated with that new field and not have the entire document\r\n        // replaced with a document with a new field.\r\n        Tasks.update(taskId, { $set : {checked: setChecked } } );\r\n      },\r\n\r\n    /**\r\n     * Edit the text of an existing task\r\n     * @param taskId - The ID of the task\r\n     * @param newText - The updated text\r\n     */\r\n    'tasks.edit'(taskId,newText){\r\n        check(taskId,String);\r\n\r\n        Tasks.update( taskId, {$set: { text: newText } } );\r\n      },\r\n\r\n});\r\n","import { Accounts } from 'meteor/accounts-base';\r\n\r\n// Not really any meaningful use in this app. Was testing out custom login and login validation.\r\nAccounts.validateLoginAttempt(function validate(option){\r\n  console.log(\"Validating...\"+option.allowed);\r\n  return option.allowed;\r\n});\r\n","import { Meteor } from 'meteor/meteor';\r\nimport '../imports/api/tasks.js';\r\nimport '../imports/api/auth.js';\r\nimport '../imports/startup/validate.js';\r\nimport { createApolloServer } from 'meteor/apollo';\r\nimport { makeExecutableSchema, addMockFunctionsToSchema } from 'graphql-tools';\r\n\r\nimport { typeDefs, resolvers } from '../imports/api/schema';\r\n\r\nconst schema = makeExecutableSchema({\r\n    typeDefs,\r\n    resolvers\r\n});\r\n\r\ncreateApolloServer({\r\n    schema,\r\n});\r\n\r\nMeteor.startup(() => {\r\n  // code to run on server at startup\r\n});\r\n"]}