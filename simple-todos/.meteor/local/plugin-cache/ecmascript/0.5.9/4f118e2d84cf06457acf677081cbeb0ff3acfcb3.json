{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"../api/tasks.js","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]}],"exports":{"exported":["Task"],"specifiers":[{"kind":"local","local":"Task","exported":"default"}]}}},"options":{"filename":"/imports/ui/Task.jsx","filenameRelative":"/imports/ui/Task.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/Task.jsx.map","sourceFileName":"/imports/ui/Task.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Task"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var Tasks;module.import('../api/tasks.js',{\"Tasks\":function(v){Tasks=v}});\n\n\n\n\n// Task component - represents a single todo item\n\nvar Task = function (_Component) {\n  _inherits(Task, _Component);\n\n  function Task(props) {\n    _classCallCheck(this, Task);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = { editable: false, text: props.task.text };\n    return _this;\n  }\n\n  Task.prototype.taskItem = function () {\n    function taskItem() {\n      var taskClassName = this.props.task.checked ? \"checked\" : \"\";\n      return React.createElement(\n        'li',\n        { className: taskClassName },\n        React.createElement(\n          'div',\n          { className: 'wrapper' },\n          React.createElement(\n            'button',\n            { className: 'edit', onClick: this.toggleEdit.bind(this) },\n            '\\u270E'\n          ),\n          React.createElement(\n            'button',\n            { className: 'delete', onClick: this.deleteTask.bind(this) },\n            '\\xD7'\n          )\n        ),\n        React.createElement('input', {\n          type: 'checkbox',\n          readOnly: true,\n          checked: this.props.task.checked,\n          onClick: this.toggleChecked.bind(this) }),\n        React.createElement(\n          'span',\n          { className: 'text' },\n          Meteor.users.findOne(Meteor.userId()).emails[0].address\n        ),\n        ' : ',\n        this.props.task.text\n      );\n    }\n\n    return taskItem;\n  }();\n\n  Task.prototype.makeTaskeditable = function () {\n    function makeTaskeditable() {\n      var taskClassName = this.props.task.checked ? \"checked\" : \"\";\n      return React.createElement(\n        'li',\n        { className: taskClassName },\n        React.createElement('input', { onChange: this.handleChange.bind(this), type: 'text', className: 'text', value: this.state.text }),\n        React.createElement(\n          'button',\n          { role: 'submit', className: 'save', onClick: this.editTask.bind(this) },\n          'Submit'\n        ),\n        React.createElement(\n          'button',\n          { role: 'button', className: 'cancel', onClick: this.toggleEdit.bind(this) },\n          'Cancel'\n        )\n      );\n    }\n\n    return makeTaskeditable;\n  }();\n\n  Task.prototype.handleChange = function () {\n    function handleChange(event) {\n      this.setState({ text: event.target.value });\n    }\n\n    return handleChange;\n  }();\n\n  Task.prototype.toggleChecked = function () {\n    function toggleChecked() {\n      Meteor.call('tasks.setChecked', this.props.task._id, !this.props.task.checked);\n    }\n\n    return toggleChecked;\n  }();\n\n  Task.prototype.deleteTask = function () {\n    function deleteTask() {\n      Meteor.call('tasks.remove', this.props.task._id);\n    }\n\n    return deleteTask;\n  }();\n\n  Task.prototype.toggleEdit = function () {\n    function toggleEdit(event) {\n      event.preventDefault();\n      this.setState({ editable: !this.state.editable });\n    }\n\n    return toggleEdit;\n  }();\n\n  Task.prototype.editTask = function () {\n    function editTask(event) {\n      event.preventDefault();\n      var text = $(\".text\").val().trim();\n      Meteor.call('tasks.edit', this.props.task._id, text, function (err, res) {\n        if (err) {\n          console.log(err.reason);\n        }\n      });\n\n      this.toggleEdit(event);\n    }\n\n    return editTask;\n  }();\n\n  Task.prototype.render = function () {\n    function render() {\n      var component = void 0;\n      if (this.state.editable) {\n        component = this.makeTaskeditable();\n      } else {\n        component = this.taskItem();\n      }\n      return component;\n    }\n\n    return render;\n  }();\n\n  return Task;\n}(Component);\n\nmodule.export(\"default\",exports.default=(Task));\n\n\nTask.propTypes = {\n  // This component gets the task to display through a React prop.\n  // We can use propTypes to indicate it is required\n  task: PropTypes.object.isRequired\n};","ast":null,"map":{"version":3,"sources":["/imports/ui/Task.jsx"],"names":["React","Component","PropTypes","Tasks","Task","props","state","editable","text","task","taskItem","taskClassName","checked","toggleEdit","bind","deleteTask","toggleChecked","Meteor","users","findOne","userId","emails","address","makeTaskeditable","handleChange","editTask","event","setState","target","value","call","_id","preventDefault","$","val","trim","err","res","console","log","reason","render","component","propTypes","object","isRequired"],"mappings":"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","file":"/imports/ui/Task.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport { Tasks } from '../api/tasks.js';\r\n// Task component - represents a single todo item\r\nexport default class Task extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {editable:false, text:props.task.text};\r\n    }\r\n\r\n    taskItem() {\r\n      const taskClassName = this.props.task.checked ? \"checked\": \"\";\r\n      return ( <li className={taskClassName}>\r\n                <div className=\"wrapper\">\r\n                  <button className=\"edit\" onClick={ this.toggleEdit.bind( this ) }>&#9998;</button>\r\n                  <button className=\"delete\" onClick={ this.deleteTask.bind( this) }>&times;</button>\r\n                </div>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  readOnly\r\n                  checked={this.props.task.checked}\r\n                  onClick={this.toggleChecked.bind(this)} />\r\n\r\n                <span className=\"text\">{Meteor.users.findOne(Meteor.userId()).emails[0].address}</span> : {this.props.task.text}\r\n              </li>);\r\n    }\r\n\r\n    makeTaskeditable(){\r\n      const taskClassName = this.props.task.checked ? \"checked\": \"\";\r\n      return (<li className={taskClassName}>\r\n\r\n          <input onChange={this.handleChange.bind(this)} type=\"text\" className=\"text\" value={this.state.text}/>\r\n          <button role=\"submit\" className=\"save\" onClick={ this.editTask.bind(this) }>Submit</button>\r\n\r\n          <button role=\"button\" className=\"cancel\" onClick={ this.toggleEdit.bind(this) }>Cancel</button>\r\n        </li>);\r\n    }\r\n\r\n    handleChange(event){\r\n      this.setState({text:event.target.value});\r\n    }\r\n\r\n\r\n   toggleChecked() {\r\n      Meteor.call('tasks.setChecked', this.props.task._id,!this.props.task.checked)\r\n\r\n  }\r\n\r\n  deleteTask(){\r\n    Meteor.call('tasks.remove',this.props.task._id);\r\n\r\n  }\r\n\r\n  toggleEdit(event){\r\n    event.preventDefault();\r\n    this.setState({editable:!this.state.editable});\r\n  }\r\n\r\n  editTask(event){\r\n    event.preventDefault();\r\n    let text = $(\".text\").val().trim();\r\n    Meteor.call('tasks.edit',this.props.task._id, text,function( err, res ){\r\n      if(err){\r\n        console.log(err.reason);\r\n      }\r\n    });\r\n\r\n    this.toggleEdit(event);\r\n  }\r\n\r\n  render() {\r\n    let component;\r\n    if(this.state.editable){\r\n      component = this.makeTaskeditable();\r\n    }\r\n    else{\r\n      component = this.taskItem();\r\n    }\r\n    return component;\r\n\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  // This component gets the task to display through a React prop.\r\n  // We can use propTypes to indicate it is required\r\n  task: PropTypes.object.isRequired,\r\n};\r\n"]},"hash":"4f118e2d84cf06457acf677081cbeb0ff3acfcb3"}
