{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"semver","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"semver"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["checkNpmVersions"],"specifiers":[{"kind":"local","local":"checkNpmVersions","exported":"checkNpmVersions"}]}}},"options":{"filename":"/packages/tmeasday:check-npm-versions/check-npm-versions.js","filenameRelative":"/packages/tmeasday:check-npm-versions/check-npm-versions.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourceFileName":"/packages/tmeasday:check-npm-versions/check-npm-versions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"check-npm-versions"},"ignored":false,"code":"module.export({checkNpmVersions:function(){return checkNpmVersions}});var semver;module.import('semver',{\"default\":function(v){semver=v}});var _;module.import('meteor/underscore',{\"_\":function(v){_=v}});\n\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nvar compatibleVersionIsInstalled = function compatibleVersionIsInstalled(name, range) {\n  try {\n    var installedVersion = require(name + '/package.json').version;\n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    // XXX add something to the tool to make this more reliable\n    var message = e.toString();\n    // One message comes out of the install npm package the other from npm directly\n    if (message.match(\"Cannot find module\") || message.match(\"Can't find npm module\")) {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n};\n\nvar checkNpmVersions = function checkNpmVersions(packages, packageName) {\n  var failures = {};\n  _.forEach(packages, function (range, name) {\n    var failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  var errors = [];\n  _.forEach(failures, function (installed, name) {\n    var requirement = name + '@' + packages[name];\n\n    if (installed) {\n      errors.push(' - ' + name + '@' + installed + ' installed, ' + requirement + ' needed');\n    } else {\n      errors.push(' - ' + name + '@' + packages[name] + ' not installed.');\n    }\n  });\n\n  var qualifier = packageName ? '(for ' + packageName + ') ' : '';\n  console.warn('WARNING: npm peer requirements ' + qualifier + 'not installed:\\n' + errors.join('\\n') + '\\n\\nRead more about installing npm peer dependencies:\\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\\n');\n};","ast":null,"map":{"version":3,"sources":["/packages/tmeasday:check-npm-versions/check-npm-versions.js"],"names":["semver","_","compatibleVersionIsInstalled","name","range","installedVersion","require","version","satisfies","e","message","toString","match","checkNpmVersions","packages","packageName","failures","forEach","failure","keys","length","errors","installed","requirement","push","qualifier","console","warn","join"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,CAAT,QAAkB,mBAAlB;;AAEA;AACA;AACA;AACA;AACA,IAAMC,+BAA+B,SAA/BA,4BAA+B,CAACC,IAAD,EAAOC,KAAP,EAAiB;AACpD,MAAI;AACF,QAAMC,mBAAmBC,QAAWH,IAAX,oBAAgCI,OAAzD;AACA,QAAIP,OAAOQ,SAAP,CAAiBH,gBAAjB,EAAmCD,KAAnC,CAAJ,EAA+C;AAC7C,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOC,gBAAP;AACD;AACF,GAPD,CAOE,OAAOI,CAAP,EAAU;AACV;AACA,QAAMC,UAAUD,EAAEE,QAAF,EAAhB;AACA;AACA,QAAID,QAAQE,KAAR,CAAc,oBAAd,KAAuCF,QAAQE,KAAR,CAAc,uBAAd,CAA3C,EAAmF;AACjF,aAAO,KAAP;AACD,KAFD,MAEO;AACL,YAAMH,CAAN;AACD;AACF;AACF,CAlBD;;AAoBA,OAAO,IAAMI,mBAAmB,SAAnBA,gBAAmB,CAACC,QAAD,EAAWC,WAAX,EAA2B;AACzD,MAAMC,WAAW,EAAjB;AACAf,IAAEgB,OAAF,CAAUH,QAAV,EAAoB,UAACV,KAAD,EAAQD,IAAR,EAAiB;AACnC,QAAMe,UAAUhB,6BAA6BC,IAA7B,EAAmCC,KAAnC,CAAhB;AACA,QAAIc,YAAY,IAAhB,EAAsB;AACpBF,eAASb,IAAT,IAAiBe,OAAjB;AACD;AACF,GALD;;AAOA,MAAIjB,EAAEkB,IAAF,CAAOH,QAAP,EAAiBI,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,MAAMC,SAAS,EAAf;AACApB,IAAEgB,OAAF,CAAUD,QAAV,EAAoB,UAACM,SAAD,EAAYnB,IAAZ,EAAqB;AACvC,QAAMoB,cAAiBpB,IAAjB,SAAyBW,SAASX,IAAT,CAA/B;;AAEA,QAAImB,SAAJ,EAAe;AACbD,aAAOG,IAAP,SAAkBrB,IAAlB,SAA0BmB,SAA1B,oBAAkDC,WAAlD;AACD,KAFD,MAEO;AACLF,aAAOG,IAAP,SAAkBrB,IAAlB,SAA0BW,SAASX,IAAT,CAA1B;AACD;AACF,GARD;;AAUA,MAAMsB,YAAYV,wBAAsBA,WAAtB,UAAwC,EAA1D;AACAW,UAAQC,IAAR,qCAA+CF,SAA/C,wBACAJ,OAAOO,IAAP,CAAY,IAAZ,CADA;AAMD,CA/BM","file":"/packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourcesContent":["import semver from 'semver';\nimport { _ } from 'meteor/underscore';\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;  \n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    // XXX add something to the tool to make this more reliable\n    const message = e.toString();\n    // One message comes out of the install npm package the other from npm directly\n    if (message.match(\"Cannot find module\") || message.match(\"Can't find npm module\")) {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const checkNpmVersions = (packages, packageName) => {\n  const failures = {};\n  _.forEach(packages, (range, name) => {\n    const failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  const errors = [];\n  _.forEach(failures, (installed, name) => {\n    const requirement = `${name}@${packages[name]}`;\n\n    if (installed) {\n      errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n    } else {\n      errors.push(` - ${name}@${packages[name]} not installed.`);\n    }\n  });\n\n  const qualifier = packageName ? `(for ${packageName}) ` : '';\n  console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n${errors.join('\\n')}\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n`);\n};\n"]},"hash":"ce5f0e986faa58528af0f18c81fc84bed2228dcd"}
