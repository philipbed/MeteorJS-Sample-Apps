{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"meteor/react-meteor-data","imported":["createContainer"],"specifiers":[{"kind":"named","imported":"createContainer","local":"createContainer"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"../api/tasks.js","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]},{"source":"./Task.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Task"}]},{"source":"./AccountsUIWrapper.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AccountsUIWrapper"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/ui/App.jsx","filenameRelative":"/imports/ui/App.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/App.jsx.map","sourceFileName":"/imports/ui/App.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"App"},"ignored":false,"code":"var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{\"default\":function(v){_classCallCheck=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{\"default\":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{\"default\":function(v){_inherits=v}});var React,Component,PropTypes;module.import('react',{\"default\":function(v){React=v},\"Component\":function(v){Component=v},\"PropTypes\":function(v){PropTypes=v}});var createContainer;module.import('meteor/react-meteor-data',{\"createContainer\":function(v){createContainer=v}});var ReactDOM;module.import('react-dom',{\"default\":function(v){ReactDOM=v}});var Tasks;module.import('../api/tasks.js',{\"Tasks\":function(v){Tasks=v}});var Task;module.import('./Task.jsx',{\"default\":function(v){Task=v}});var AccountsUIWrapper;module.import('./AccountsUIWrapper.jsx',{\"default\":function(v){AccountsUIWrapper=v}});\n\n\n\n\n\n\n\n\n\n\n// App component - represents the whole app\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      hideCompleted: false\n    };\n    return _this;\n  }\n\n  App.prototype.handleSubmit = function () {\n    function handleSubmit(event) {\n      event.preventDefault();\n\n      // Find the text field via the React ref\n      var text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\n\n      Meteor.call('tasks.insert', text);\n\n      // Clear form\n      ReactDOM.findDOMNode(this.refs.textInput).value = '';\n    }\n\n    return handleSubmit;\n  }();\n\n  App.prototype.toggleHideCompleted = function () {\n    function toggleHideCompleted() {\n      this.setState({\n        hideCompleted: !this.state.hideCompleted\n      });\n    }\n\n    return toggleHideCompleted;\n  }();\n\n  App.prototype.renderTasks = function () {\n    function renderTasks() {\n      var filteredTasks = this.props.tasks;\n      if (this.state.hideCompleted) {\n        filteredTasks = filteredTasks.filter(function (task) {\n          return !task.checked;\n        });\n      }\n      return filteredTasks.map(function (task) {\n        return React.createElement(Task, { key: task._id, task: task });\n      });\n    }\n\n    return renderTasks;\n  }();\n\n  App.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        'div',\n        { className: 'container' },\n        React.createElement(\n          'header',\n          null,\n          React.createElement(\n            'h1',\n            null,\n            'To Do List | You have ',\n            this.props.incompleteTaskCount,\n            ' to do'\n          ),\n          React.createElement(\n            'label',\n            { className: 'hide-completed' },\n            React.createElement('input', {\n              type: 'checkbox',\n              readOnly: true,\n              checked: this.state.hideCompleted,\n              onClick: this.toggleHideCompleted.bind(this) }),\n            'Hide Completed Tasks'\n          ),\n          React.createElement(AccountsUIWrapper, null),\n          this.props.currentUser ? React.createElement(\n            'form',\n            { className: 'new-task', onSubmit: this.handleSubmit.bind(this) },\n            React.createElement('input', {\n              type: 'text',\n              ref: 'textInput',\n              placeholder: 'Type to add new tasks'\n            })\n          ) : ''\n        ),\n        React.createElement(\n          'ul',\n          null,\n          this.renderTasks()\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return App;\n}(Component);\n\nApp.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  incompleteTaskCount: PropTypes.number.isRequired,\n  currentUser: PropTypes.object\n};\n\nmodule.export(\"default\",exports.default=(createContainer(function () {\n  Meteor.subscribe('tasks');\n  return {\n    tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\n    incompleteTaskCount: Tasks.find({ checked: { $ne: true } }).count(),\n    currentUser: Meteor.user()\n  };\n}, App)));","ast":null,"map":{"version":3,"sources":["/imports/ui/App.jsx"],"names":["React","Component","PropTypes","createContainer","ReactDOM","Tasks","Task","AccountsUIWrapper","App","props","state","hideCompleted","handleSubmit","event","preventDefault","text","findDOMNode","refs","textInput","value","trim","Meteor","call","toggleHideCompleted","setState","renderTasks","filteredTasks","tasks","filter","task","checked","map","_id","render","incompleteTaskCount","bind","currentUser","propTypes","array","isRequired","number","object","subscribe","find","sort","createdAt","fetch","$ne","count","user"],"mappings":"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","file":"/imports/ui/App.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport { createContainer } from 'meteor/react-meteor-data';\r\nimport ReactDOM from 'react-dom';\r\nimport { Tasks } from '../api/tasks.js';\r\n\r\nimport Task from './Task.jsx';\r\nimport AccountsUIWrapper from './AccountsUIWrapper.jsx';\r\n\r\n// App component - represents the whole app\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      hideCompleted: false,\r\n    };\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    // Find the text field via the React ref\r\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\r\n\r\n    Meteor.call('tasks.insert',text);\r\n\r\n    // Clear form\r\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\r\n  }\r\n\r\n  toggleHideCompleted(){\r\n    this.setState({\r\n      hideCompleted: !this.state.hideCompleted,\r\n    });\r\n  }\r\n\r\n  renderTasks() {\r\n    let filteredTasks = this.props.tasks;\r\n    if( this.state.hideCompleted ){\r\n      filteredTasks = filteredTasks.filter( (task) => !task.checked );\r\n    }\r\n    return filteredTasks.map( (task) => (\r\n      <Task key={task._id} task={task} />\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header>\r\n          <h1>To Do List | You have {this.props.incompleteTaskCount} to do</h1>\r\n\r\n          <label className=\"hide-completed\">\r\n            <input\r\n              type=\"checkbox\"\r\n              readOnly\r\n              checked={this.state.hideCompleted}\r\n              onClick={this.toggleHideCompleted.bind(this)}/>\r\n              Hide Completed Tasks\r\n          </label>\r\n\r\n          <AccountsUIWrapper/>\r\n\r\n          { this.props.currentUser ?\r\n            <form className=\"new-task\" onSubmit={this.handleSubmit.bind(this)} >\r\n              <input\r\n                type=\"text\"\r\n                ref=\"textInput\"\r\n                placeholder=\"Type to add new tasks\"\r\n              />\r\n            </form> : ''\r\n          }\r\n        </header>\r\n        <ul>\r\n          {this.renderTasks()}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n   tasks: PropTypes.array.isRequired,\r\n   incompleteTaskCount: PropTypes.number.isRequired,\r\n   currentUser: PropTypes.object,\r\n };\r\n\r\n export default createContainer(() => {\r\n   Meteor.subscribe('tasks');\r\n   return {\r\n     tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\r\n     incompleteTaskCount: Tasks.find({checked: {$ne: true} }).count(),\r\n     currentUser: Meteor.user(),\r\n   };\r\n }, App);\r\n"]},"hash":"7c3713a8a3653d35335a1c503bb9eaf21b490d07"}
