[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactMeteorData;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"react-meteor-data\":{\"react-meteor-data.jsx\":[\"meteor/tmeasday:check-npm-versions\",\"./createContainer.jsx\",\"./ReactMeteorData.jsx\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/react-meteor-data/react-meteor-data.jsx                                                       //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({createContainer:function(){return createContainer},ReactMeteorData:function(){return ReactMeteorData}});var checkNpmVersions;module.import('meteor/tmeasday:check-npm-versions',{\"checkNpmVersions\":function(v){checkNpmVersions=v}});\ncheckNpmVersions({                                                                                        // 2\n  react: '15.x',                                                                                          // 3\n  'react-addons-pure-render-mixin': '15.x'                                                                // 4\n}, 'react-meteor-data');                                                                                  // 2\n                                                                                                          //\nvar createContainer = require('./createContainer.jsx')['default'];                                        // 7\nvar ReactMeteorData = require('./ReactMeteorData.jsx')['default'];                                        // 8\n                                                                                                          //\n                                                                                                          // 10\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ReactMeteorData.jsx\":[\"babel-runtime/helpers/typeof\",\"babel-runtime/helpers/classCallCheck\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/react-meteor-data/ReactMeteorData.jsx                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});\n                                                                                                          //\nvar ReactMeteorData = {                                                                                   // 1\n  componentWillMount: function () {                                                                       // 2\n    function componentWillMount() {                                                                       // 1\n      this.data = {};                                                                                     // 3\n      this._meteorDataManager = new MeteorDataManager(this);                                              // 4\n      var newData = this._meteorDataManager.calculateData();                                              // 5\n      this._meteorDataManager.updateData(newData);                                                        // 6\n    }                                                                                                     // 7\n                                                                                                          //\n    return componentWillMount;                                                                            // 1\n  }(),                                                                                                    // 1\n  componentWillUpdate: function () {                                                                      // 8\n    function componentWillUpdate(nextProps, nextState) {                                                  // 1\n      var saveProps = this.props;                                                                         // 9\n      var saveState = this.state;                                                                         // 10\n      var newData = void 0;                                                                               // 11\n      try {                                                                                               // 12\n        // Temporarily assign this.state and this.props,                                                  // 13\n        // so that they are seen by getMeteorData!                                                        // 14\n        // This is a simulation of how the proposed Observe API                                           // 15\n        // for React will work, which calls observe() after                                               // 16\n        // componentWillUpdate and after props and state are                                              // 17\n        // updated, but before render() is called.                                                        // 18\n        // See https://github.com/facebook/react/issues/3398.                                             // 19\n        this.props = nextProps;                                                                           // 20\n        this.state = nextState;                                                                           // 21\n        newData = this._meteorDataManager.calculateData();                                                // 22\n      } finally {                                                                                         // 23\n        this.props = saveProps;                                                                           // 24\n        this.state = saveState;                                                                           // 25\n      }                                                                                                   // 26\n                                                                                                          //\n      this._meteorDataManager.updateData(newData);                                                        // 28\n    }                                                                                                     // 29\n                                                                                                          //\n    return componentWillUpdate;                                                                           // 1\n  }(),                                                                                                    // 1\n  componentWillUnmount: function () {                                                                     // 30\n    function componentWillUnmount() {                                                                     // 1\n      this._meteorDataManager.dispose();                                                                  // 31\n    }                                                                                                     // 32\n                                                                                                          //\n    return componentWillUnmount;                                                                          // 1\n  }()                                                                                                     // 1\n};                                                                                                        // 1\n                                                                                                          //\n// A class to keep the state and utility methods needed to manage                                         // 35\n// the Meteor data for a component.                                                                       // 36\n                                                                                                          //\nvar MeteorDataManager = function () {                                                                     //\n  function MeteorDataManager(component) {                                                                 // 38\n    _classCallCheck(this, MeteorDataManager);                                                             // 38\n                                                                                                          //\n    this.component = component;                                                                           // 39\n    this.computation = null;                                                                              // 40\n    this.oldData = null;                                                                                  // 41\n  }                                                                                                       // 42\n                                                                                                          //\n  MeteorDataManager.prototype.dispose = function () {                                                     //\n    function dispose() {                                                                                  //\n      if (this.computation) {                                                                             // 45\n        this.computation.stop();                                                                          // 46\n        this.computation = null;                                                                          // 47\n      }                                                                                                   // 48\n    }                                                                                                     // 49\n                                                                                                          //\n    return dispose;                                                                                       //\n  }();                                                                                                    //\n                                                                                                          //\n  MeteorDataManager.prototype.calculateData = function () {                                               //\n    function calculateData() {                                                                            //\n      var component = this.component;                                                                     // 52\n                                                                                                          //\n      if (!component.getMeteorData) {                                                                     // 54\n        return null;                                                                                      // 55\n      }                                                                                                   // 56\n                                                                                                          //\n      // When rendering on the server, we don't want to use the Tracker.                                  // 58\n      // We only do the first rendering on the server so we can get the data right away                   // 59\n      if (Meteor.isServer) {                                                                              // 60\n        return component.getMeteorData();                                                                 // 61\n      }                                                                                                   // 62\n                                                                                                          //\n      if (this.computation) {                                                                             // 64\n        this.computation.stop();                                                                          // 65\n        this.computation = null;                                                                          // 66\n      }                                                                                                   // 67\n                                                                                                          //\n      var data = void 0;                                                                                  // 69\n      // Use Tracker.nonreactive in case we are inside a Tracker Computation.                             // 70\n      // This can happen if someone calls `ReactDOM.render` inside a Computation.                         // 71\n      // In that case, we want to opt out of the normal behavior of nested                                // 72\n      // Computations, where if the outer one is invalidated or stopped,                                  // 73\n      // it stops the inner one.                                                                          // 74\n      this.computation = Tracker.nonreactive(function () {                                                // 75\n        return Tracker.autorun(function (c) {                                                             // 76\n          if (c.firstRun) {                                                                               // 77\n            var savedSetState = component.setState;                                                       // 78\n            try {                                                                                         // 79\n              component.setState = function () {                                                          // 80\n                throw new Error(\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" + \" loop. To respond to Meteor data changing, consider making this component\" + \" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" + \" a child component. Then you can use `componentWillReceiveProps` in that\" + \" child component.\");\n              };                                                                                          // 87\n                                                                                                          //\n              data = component.getMeteorData();                                                           // 89\n            } finally {                                                                                   // 90\n              component.setState = savedSetState;                                                         // 91\n            }                                                                                             // 92\n          } else {                                                                                        // 93\n            // Stop this computation instead of using the re-run.                                         // 94\n            // We use a brand-new autorun for each call to getMeteorData                                  // 95\n            // to capture dependencies on any reactive data sources that                                  // 96\n            // are accessed.  The reason we can't use a single autorun                                    // 97\n            // for the lifetime of the component is that Tracker only                                     // 98\n            // re-runs autoruns at flush time, while we need to be able to                                // 99\n            // re-call getMeteorData synchronously whenever we want, e.g.                                 // 100\n            // from componentWillUpdate.                                                                  // 101\n            c.stop();                                                                                     // 102\n            // Calling forceUpdate() triggers componentWillUpdate which                                   // 103\n            // recalculates getMeteorData() and re-renders the component.                                 // 104\n            component.forceUpdate();                                                                      // 105\n          }                                                                                               // 106\n        });                                                                                               // 107\n      });                                                                                                 // 108\n                                                                                                          //\n      if (Package.mongo && Package.mongo.Mongo) {                                                         // 110\n        Object.keys(data).forEach(function (key) {                                                        // 111\n          if (data[key] instanceof Package.mongo.Mongo.Cursor) {                                          // 112\n            console.warn(\"Warning: you are returning a Mongo cursor from getMeteorData. This value \" + \"will not be reactive. You probably want to call `.fetch()` on the cursor \" + \"before returning it.\");\n          }                                                                                               // 117\n        });                                                                                               // 118\n      }                                                                                                   // 119\n                                                                                                          //\n      return data;                                                                                        // 121\n    }                                                                                                     // 122\n                                                                                                          //\n    return calculateData;                                                                                 //\n  }();                                                                                                    //\n                                                                                                          //\n  MeteorDataManager.prototype.updateData = function () {                                                  //\n    function updateData(newData) {                                                                        //\n      var component = this.component;                                                                     // 125\n      var oldData = this.oldData;                                                                         // 126\n                                                                                                          //\n      if (!(newData && (typeof newData === \"undefined\" ? \"undefined\" : _typeof(newData)) === 'object')) {\n        throw new Error(\"Expected object returned from getMeteorData\");                                   // 129\n      }                                                                                                   // 130\n      // update componentData in place based on newData                                                   // 131\n      for (var key in meteorBabelHelpers.sanitizeForInObject(newData)) {                                  // 132\n        component.data[key] = newData[key];                                                               // 133\n      }                                                                                                   // 134\n      // if there is oldData (which is every time this method is called                                   // 135\n      // except the first), delete keys in newData that aren't in                                         // 136\n      // oldData.  don't interfere with other keys, in case we are                                        // 137\n      // co-existing with something else that writes to a component's                                     // 138\n      // this.data.                                                                                       // 139\n      if (oldData) {                                                                                      // 140\n        for (var _key in meteorBabelHelpers.sanitizeForInObject(oldData)) {                               // 141\n          if (!(_key in newData)) {                                                                       // 142\n            delete component.data[_key];                                                                  // 143\n          }                                                                                               // 144\n        }                                                                                                 // 145\n      }                                                                                                   // 146\n      this.oldData = newData;                                                                             // 147\n    }                                                                                                     // 148\n                                                                                                          //\n    return updateData;                                                                                    //\n  }();                                                                                                    //\n                                                                                                          //\n  return MeteorDataManager;                                                                               //\n}();                                                                                                      //\n                                                                                                          //\nmodule.export(\"default\",exports.default=(ReactMeteorData));                                               // 151\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"createContainer.jsx\":[\"babel-runtime/helpers/extends\",\"react\",\"react-addons-pure-render-mixin\",\"./ReactMeteorData.jsx\",function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/react-meteor-data/createContainer.jsx                                                         //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nmodule.export({default:function(){return createContainer}});var _extends;module.import('babel-runtime/helpers/extends',{\"default\":function(v){_extends=v}});var React;module.import('react',{\"default\":function(v){React=v}});var PureRenderMixin;module.import('react-addons-pure-render-mixin',{\"default\":function(v){PureRenderMixin=v}});var ReactMeteorData;module.import('./ReactMeteorData.jsx',{\"default\":function(v){ReactMeteorData=v}});\n                                                                                                          //\n/**                                                                                                       // 1\n * Container helper using react-meteor-data.                                                              //\n */                                                                                                       //\n                                                                                                          //\n                                                                                                          // 5\n                                                                                                          // 6\n                                                                                                          //\n                                                                                                          // 8\n                                                                                                          //\nfunction createContainer() {                                                                              // 10\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                   // 10\n  var Component = arguments[1];                                                                           // 10\n                                                                                                          //\n  var expandedOptions = options;                                                                          // 11\n  if (typeof options === 'function') {                                                                    // 12\n    expandedOptions = {                                                                                   // 13\n      getMeteorData: options                                                                              // 14\n    };                                                                                                    // 13\n  }                                                                                                       // 16\n                                                                                                          //\n  var _expandedOptions = expandedOptions;                                                                 // 10\n  var _getMeteorData = _expandedOptions.getMeteorData;                                                    // 10\n  var _expandedOptions$pure = _expandedOptions.pure;                                                      // 10\n  var pure = _expandedOptions$pure === undefined ? true : _expandedOptions$pure;                          // 10\n                                                                                                          //\n                                                                                                          //\n  var mixins = [ReactMeteorData];                                                                         // 23\n  if (pure) {                                                                                             // 24\n    mixins.push(PureRenderMixin);                                                                         // 25\n  }                                                                                                       // 26\n                                                                                                          //\n  /* eslint-disable react/prefer-es6-class */                                                             // 28\n  return React.createClass({                                                                              // 29\n    displayName: 'MeteorDataContainer',                                                                   // 30\n    mixins: mixins,                                                                                       // 31\n    getMeteorData: function () {                                                                          // 32\n      function getMeteorData() {                                                                          // 29\n        return _getMeteorData(this.props);                                                                // 33\n      }                                                                                                   // 34\n                                                                                                          //\n      return getMeteorData;                                                                               // 29\n    }(),                                                                                                  // 29\n    render: function () {                                                                                 // 35\n      function render() {                                                                                 // 29\n        return React.createElement(Component, _extends({}, this.props, this.data));                       // 36\n      }                                                                                                   // 37\n                                                                                                          //\n      return render;                                                                                      // 29\n    }()                                                                                                   // 29\n  });                                                                                                     // 29\n}                                                                                                         // 39\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}},{\"extensions\":[\".js\",\".json\",\".jsx\"]});\nvar exports = require(\"./node_modules/meteor/react-meteor-data/react-meteor-data.jsx\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['react-meteor-data'] = exports, {\n  ReactMeteorData: ReactMeteorData\n});\n\n})();\n","servePath":"/packages/react-meteor-data.js","sourceMap":{"version":3,"sources":["/packages/react-meteor-data/react-meteor-data.jsx","/packages/react-meteor-data/ReactMeteorData.jsx","/packages/react-meteor-data/createContainer.jsx"],"names":["checkNpmVersions","react","createContainer","require","ReactMeteorData","componentWillMount","data","_meteorDataManager","MeteorDataManager","newData","calculateData","updateData","componentWillUpdate","nextProps","nextState","saveProps","props","saveState","state","componentWillUnmount","dispose","component","computation","oldData","stop","getMeteorData","Meteor","isServer","Tracker","nonreactive","autorun","c","firstRun","savedSetState","setState","Error","forceUpdate","Package","mongo","Mongo","Object","keys","forEach","key","Cursor","console","warn","React","PureRenderMixin","options","Component","expandedOptions","pure","mixins","push","createClass","displayName","render"],"mappings":"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","file":"/packages/react-meteor-data.js","sourcesContent":["import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\ncheckNpmVersions({\n  react: '15.x',\n  'react-addons-pure-render-mixin': '15.x',\n}, 'react-meteor-data');\n\nconst createContainer = require('./createContainer.jsx').default;\nconst ReactMeteorData = require('./ReactMeteorData.jsx').default;\n\nexport { createContainer, ReactMeteorData };\n","const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport default ReactMeteorData;\n","/**\n * Container helper using react-meteor-data.\n */\n\nimport React from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nimport ReactMeteorData from './ReactMeteorData.jsx';\n\nexport default function createContainer(options = {}, Component) {\n  let expandedOptions = options;\n  if (typeof options === 'function') {\n    expandedOptions = {\n      getMeteorData: options,\n    };\n  }\n\n  const {\n    getMeteorData,\n    pure = true,\n  } = expandedOptions;\n\n  const mixins = [ReactMeteorData];\n  if (pure) {\n    mixins.push(PureRenderMixin);\n  }\n\n  /* eslint-disable react/prefer-es6-class */\n  return React.createClass({\n    displayName: 'MeteorDataContainer',\n    mixins,\n    getMeteorData() {\n      return getMeteorData(this.props);\n    },\n    render() {\n      return <Component {...this.props} {...this.data} />;\n    },\n  });\n}\n"]}}]